--[[
--
-- Use case testing file for portal_proxy file
--
--]]
package.path       = package.path .. ";../www/?.lua"
unit               = require "unit-test"
check              = require "check"
uhttpd             = require "uhttpd"
json               = require "luci.jsonc"
cst                = require "proxy_constants"
local portal_proxy = require "portal_proxy"

local CURL = "curl "

function format_string(str,format)
  return format .. str .. "\27[0m"
end

print(format_string(
      "======= BEGIN UNIT TESTING =======",
      "\27[1m\27[103m\27[34m"
))


--[[  ----------------------------------------------------
--
--		USE CASE PORTAL PROXY FUNCTIONS
--
--]]  ----------------------------------------------------

print("======================================================")
print("=======================USE CASE=======================")
print("======================================================\r\n\r\n")

--[[
--
--     BEFORE AUTHENTICATION
--
--]]

print(format_string("START SCENARIO","\27[32m"))
io.write("PRESS ENTER TO START\n")
io.read()
print("\n")

io.write("Enter a user ip. If none a random one will be generated.\n")
local user_ip = io.read()

io.write("Enter a user mac. If none a random one will be generated.\n")
local user_mac = io.read()

local ap_mac     = cst.ap_mac
if user_ip == "" then
  user_ip  = unit.user_ip   --random client ip
end
if user_mac == "" then
  user_mac = unit.user_mac  --random client mac
end

--print(format_string("The client should be redirected by the firewall and get a 302","\27[94m"))
local initialize = portal_proxy.initialize_redirected_client(user_ip,user_mac)

if initialize == false then
  return false
end

local sid_db    = initialize[1]
local secret_db = initialize[2]

print("+++++++++++++++++++++++++++++++++++++++++++++++++++++++")
print("+++++++++++++++++++++++++++++++++++++++++++++++++++++++")

print(format_string("Check session id and secret in local database","\27[94m"))
local s = check.select_localdb(user_mac,user_ip,sid_db,secret_db)
if s == false then
  print("Session id / Secret not found in local database.\n")
  return false
end

print("Session id = " .. sid_db .. "\r\n")
print("Secret     = " .. secret_db .. "\r\n")

io.write("DO YOU WANT TO CONTINUE? y/n\n")
local answer = io.read()
if answer == "n" then
  return false
end

-- Check wordpress db
print(format_string("Show data from database","\27[94m"))
unit.select_wpdb(user_ip,sid_db,secret_db)
unit.select_users(user_mac)
print("+++++++++++++++++++++++++++++++++++")

-- 302
local portal_url = cst.PortalUrl 
.. "wordpress/wp-login.php?session_id=" .. sid_db
.. "&mac=" .. user_mac
print("Portal Url = " .. portal_url)

io.write("DO YOU WANT TO LOGIN? y/n\n")
local answer = io.read()

if answer == "n" then
  io.write("PRESS ENTER TO RESUME SCENARIO\n")
  io.read()
end

if answer == "y" then
  -- cURL authenticate on wp
  io.write("Username: \n")
  local username = io.read()
  io.write("Password: \n")
  local password = io.read()
  unit.curl_authenticate(username,password,sid_db,user_mac)

--[[
--           
--    AFTER AUTHENTICATION
--
--]]

  -- Call landing page
  print(format_string("Go to landing page.\n","\27[94m"))
  local curl_landing = CURL .. '-v -b jar "' .. cst.PortalUrl .. 
  'wordpress/' .. '"'
  print (curl_landing)
  local landing_page = io.popen(curl_landing):read("*a")

  -- Verify if wordpress login has failed or not.
  local curl_landing = CURL .. '-b jar -c jar -i "' .. cst.PortalUrl .. 
  'wordpress/' .. '" | grep 302'
  local login_status = io.popen(curl_landing):read("*l")
  if login_status ~= nil then 
    if string.match(login_status,"302") == "302" then
      print("LOGIN FAILED.\n")
      io.write("\n")
      io.read()
    end
  else
    io.write("YOU HAVE BEEN SUCCESSFULLY LOGGED IN!\n")
    io.read()
  end
end
io.write("PRESS ENTER TO QUERY DATABASE AFTER AUTHENTICATION\n")
io.read()

-- Verify wpdb it should be missing only one column
print(format_string("Check database after wp authentication\n","\27[94m"))
unit.select_wpdb(user_ip,sid_db,secret_db)
unit.select_users(user_mac)
print("\r\n")

print(format_string("Verify secret coming from client on AP then on server\n","\27[94m"))
io.write("PRESS ENTER TO CONTINUE\n")
io.read()

-- 200 Once client has the secret from server
io.write("Session id? By default it will be the sid generated by server.\n")
local sid = io.read()
io.write("Secret?  By default it will be the sid generated by server.\n")
local secret = io.read()

if sid == "" then
  sid = sid_db
end

if secret == "" then
  secret = secret_db
end

local val = portal_proxy.validate(user_mac,user_ip,sid,secret)
if val == false then
  portal_proxy.initialize_redirected_client(user_ip,user_mac)
else
  portal_proxy.success()
end

-- Verify wpdb it should be fully filled
print(format_string("Check database after ap authentication\n","\27[94m"))
unit.select_wpdb(user_ip,sid_db,secret_db)
unit.select_users(user_mac)
print("\n")
-- Remove test data
io.write("clear localdb? y/n\n")
local answer = io.read()
if answer == "y" then
  local x =os.execute("rm -rf /tmp/ssid-test/*")
  if x == 0 then
    print("Local database cleared!\n")
  end
end
io.write("clear row wpdb? y/n\n")
local answer = io.read()
if answer == "y" then
  print("Deleting row from wp_connection... \n")
  os.execute(CURL .. cst.PortalUrl .. "plugins/service/testing/cleardb.php?user_ip=" .. user_ip)
end
print("\n")  
print(format_string("=========== END USE CASE ========\n","\27[94m"))
